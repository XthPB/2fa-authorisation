{"ast":null,"code":"// import React, { useState } from 'react'\n// import avatar from '../assets/profile.png';\n// import toast, { Toaster } from 'react-hot-toast';\n// import { useFormik } from 'formik';\n// import { profileValidation } from '../helper/validate';\n// import convertToBase64 from '../helper/convert';\n// import useFetch from '../hooks/fetch.hook';\n// import { updateUser } from '../helper/helper'\n// import { useNavigate } from 'react-router-dom'\n\n// import styles from '../styles/Username.module.css';\n// import extend from '../styles/Profile.module.css'\n\n// export default function Profile() {\n\n//   const [file, setFile] = useState();\n//   const [{ isLoading, apiData, serverError }] = useFetch();\n//   const navigate = useNavigate()\n\n//   const formik = useFormik({\n//     initialValues : {\n//       firstName : apiData?.firstName || '',\n//       lastName: apiData?.lastName || '',\n//       email: apiData?.email || '',\n//       mobile: apiData?.mobile || '',\n//       address : apiData?.address || ''\n//     },\n//     enableReinitialize: true,\n//     validate : profileValidation,\n//     validateOnBlur: false,\n//     validateOnChange: false,\n//     onSubmit : async values => {\n//       values = await Object.assign(values, { profile : file || apiData?.profile || ''})\n//       let updatePromise = updateUser(values);\n\n//       toast.promise(updatePromise, {\n//         loading: 'Updating...',\n//         success : <b>Update Successfully...!</b>,\n//         error: <b>Could not Update!</b>\n//       });\n\n//     }\n//   })\n\n//   /** formik doensn't support file upload so we need to create this handler */\n//   const onUpload = async e => {\n//     const base64 = await convertToBase64(e.target.files[0]);\n//     setFile(base64);\n//   }\n\n//   // logout handler function\n//   function userLogout(){\n//     localStorage.removeItem('token');\n//     navigate('/')\n//   }\n\n//   if(isLoading) return <h1 className='text-2xl font-bold'>isLoading</h1>;\n//   if(serverError) return <h1 className='text-xl text-red-500'>{serverError.message}</h1>\n\n//   return (\n//     <div className=\"container mx-auto\">\n\n//       <Toaster position='top-center' reverseOrder={false}></Toaster>\n\n//       <div className='flex justify-center items-center h-screen'>\n//         <div className={`${styles.glass} ${extend.glass}`} style={{ width: \"45%\", paddingTop: '3em'}}>\n\n//           <div className=\"title flex flex-col items-center\">\n//             <h4 className='text-5xl font-bold'>Profile</h4>\n//             <span className='py-4 text-xl w-2/3 text-center text-gray-500'>\n//                 You can update the details.\n//             </span>\n//           </div>\n\n//           <form className='py-1' onSubmit={formik.handleSubmit}>\n//               <div className='profile flex justify-center py-4'>\n//                   <label htmlFor=\"profile\">\n//                     <img src={apiData?.profile || file || avatar} className={`${styles.profile_img} ${extend.profile_img}`} alt=\"avatar\" />\n//                   </label>\n\n//                   <input onChange={onUpload} type=\"file\" id='profile' name='profile' />\n//               </div>\n\n//               <div className=\"textbox flex flex-col items-center gap-6\">\n//                 <div className=\"name flex w-3/4 gap-10\">\n//                   <input {...formik.getFieldProps('firstName')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='FirstName' />\n//                   <input {...formik.getFieldProps('lastName')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='LastName' />\n//                 </div>\n\n//                 <div className=\"name flex w-3/4 gap-10\">\n//                   <input {...formik.getFieldProps('mobile')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='Mobile No.' />\n//                   <input {...formik.getFieldProps('email')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='Email*' />\n//                 </div>\n\n//                   <input {...formik.getFieldProps('address')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='Address' />\n//                   <button className={styles.btn} type='submit'>Update</button>\n\n//               </div>\n\n//               <div className=\"text-center py-4\">\n//                 <span className='text-gray-500'>come back later? <button onClick={userLogout} className='text-red-500' to=\"/\">Logout</button></span>\n//               </div>\n\n//           </form>\n\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/prana/Desktop/login/client/src/components/Profile.js"],"sourcesContent":["// import React, { useState } from 'react'\r\n// import avatar from '../assets/profile.png';\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n// import { useFormik } from 'formik';\r\n// import { profileValidation } from '../helper/validate';\r\n// import convertToBase64 from '../helper/convert';\r\n// import useFetch from '../hooks/fetch.hook';\r\n// import { updateUser } from '../helper/helper'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\n// import styles from '../styles/Username.module.css';\r\n// import extend from '../styles/Profile.module.css'\r\n\r\n// export default function Profile() {\r\n\r\n//   const [file, setFile] = useState();\r\n//   const [{ isLoading, apiData, serverError }] = useFetch();\r\n//   const navigate = useNavigate()\r\n \r\n//   const formik = useFormik({\r\n//     initialValues : {\r\n//       firstName : apiData?.firstName || '',\r\n//       lastName: apiData?.lastName || '',\r\n//       email: apiData?.email || '',\r\n//       mobile: apiData?.mobile || '',\r\n//       address : apiData?.address || ''\r\n//     },\r\n//     enableReinitialize: true,\r\n//     validate : profileValidation,\r\n//     validateOnBlur: false,\r\n//     validateOnChange: false,\r\n//     onSubmit : async values => {\r\n//       values = await Object.assign(values, { profile : file || apiData?.profile || ''})\r\n//       let updatePromise = updateUser(values);\r\n\r\n//       toast.promise(updatePromise, {\r\n//         loading: 'Updating...',\r\n//         success : <b>Update Successfully...!</b>,\r\n//         error: <b>Could not Update!</b>\r\n//       });\r\n\r\n//     }\r\n//   })\r\n\r\n//   /** formik doensn't support file upload so we need to create this handler */\r\n//   const onUpload = async e => {\r\n//     const base64 = await convertToBase64(e.target.files[0]);\r\n//     setFile(base64);\r\n//   }\r\n\r\n//   // logout handler function\r\n//   function userLogout(){\r\n//     localStorage.removeItem('token');\r\n//     navigate('/')\r\n//   }\r\n\r\n//   if(isLoading) return <h1 className='text-2xl font-bold'>isLoading</h1>;\r\n//   if(serverError) return <h1 className='text-xl text-red-500'>{serverError.message}</h1>\r\n\r\n//   return (\r\n//     <div className=\"container mx-auto\">\r\n\r\n//       <Toaster position='top-center' reverseOrder={false}></Toaster>\r\n\r\n//       <div className='flex justify-center items-center h-screen'>\r\n//         <div className={`${styles.glass} ${extend.glass}`} style={{ width: \"45%\", paddingTop: '3em'}}>\r\n\r\n//           <div className=\"title flex flex-col items-center\">\r\n//             <h4 className='text-5xl font-bold'>Profile</h4>\r\n//             <span className='py-4 text-xl w-2/3 text-center text-gray-500'>\r\n//                 You can update the details.\r\n//             </span>\r\n//           </div>\r\n\r\n//           <form className='py-1' onSubmit={formik.handleSubmit}>\r\n//               <div className='profile flex justify-center py-4'>\r\n//                   <label htmlFor=\"profile\">\r\n//                     <img src={apiData?.profile || file || avatar} className={`${styles.profile_img} ${extend.profile_img}`} alt=\"avatar\" />\r\n//                   </label>\r\n                  \r\n//                   <input onChange={onUpload} type=\"file\" id='profile' name='profile' />\r\n//               </div>\r\n\r\n//               <div className=\"textbox flex flex-col items-center gap-6\">\r\n//                 <div className=\"name flex w-3/4 gap-10\">\r\n//                   <input {...formik.getFieldProps('firstName')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='FirstName' />\r\n//                   <input {...formik.getFieldProps('lastName')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='LastName' />\r\n//                 </div>\r\n\r\n//                 <div className=\"name flex w-3/4 gap-10\">\r\n//                   <input {...formik.getFieldProps('mobile')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='Mobile No.' />\r\n//                   <input {...formik.getFieldProps('email')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='Email*' />\r\n//                 </div>\r\n\r\n               \r\n//                   <input {...formik.getFieldProps('address')} className={`${styles.textbox} ${extend.textbox}`} type=\"text\" placeholder='Address' />\r\n//                   <button className={styles.btn} type='submit'>Update</button>\r\n               \r\n                  \r\n//               </div>\r\n\r\n//               <div className=\"text-center py-4\">\r\n//                 <span className='text-gray-500'>come back later? <button onClick={userLogout} className='text-red-500' to=\"/\">Logout</button></span>\r\n//               </div>\r\n\r\n//           </form>\r\n\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}