{"ast":null,"code":"// import axios from 'axios';\n// import jwt_decode from 'jwt-decode';\n\n// axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n// /** Make API Requests */\n\n// /** To get username from Token */\n// export async function getUsername(){\n//     const token = localStorage.getItem('token')\n//     if(!token) return Promise.reject(\"Cannot find Token\");\n//     let decode = jwt_decode(token)\n//     return decode;\n// }\n\n// /** authenticate function */\n// export async function authenticate(username){\n//     try {\n//         return await axios.post('/api/authenticate', { username })\n//     } catch (error) {\n//         return { error : \"Username doesn't exist...!\"}\n//     }\n// }\n\n// /** get User details */\n// export async function getUser({ username }){\n//     try {\n//         const { data } = await axios.get(`/api/user/${username}`);\n//         return { data };\n//     } catch (error) {\n//         return { error : \"Password doesn't Match...!\"}\n//     }\n// }\n\n// /** register user function */\n// export async function registerUser(credentials){\n//     try {\n//         const { data : { msg }, status } = await axios.post(`/api/register`, credentials);\n\n//         let { username, email } = credentials;\n\n//         /** send email */\n//         if(status === 201){\n//             await axios.post('/api/registerMail', { username, userEmail : email, text : msg})\n//         }\n\n//         return Promise.resolve(msg)\n//     } catch (error) {\n//         return Promise.reject({ error })\n//     }\n// }\n\n// /** login function */\n// export async function verifyPassword({ username, password }){\n//     try {\n//         if(username){\n//             const { data } = await axios.post('/api/login', { username, password })\n//             return Promise.resolve({ data });\n//         }\n//     } catch (error) {\n//         return Promise.reject({ error : \"Password doesn't Match...!\"})\n//     }\n// }\n\n// /** update user profile function */\n// export async function updateUser(response){\n//     try {\n\n//         const token = await localStorage.getItem('token');\n//         const data = await axios.put('/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\n\n//         return Promise.resolve({ data })\n//     } catch (error) {\n//         return Promise.reject({ error : \"Couldn't Update Profile...!\"})\n//     }\n// }\n\n// /** generate OTP */\n// export async function generateOTP(username){\n//     try {\n//         const {data : { code }, status } = await axios.get('/api/generateOTP', { params : { username }});\n\n//         // send mail with the OTP\n//         if(status === 201){\n//             let { data : { email }} = await getUser({ username });\n//             let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n//             await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Password Recovery OTP\"})\n//         }\n//         return Promise.resolve(code);\n//     } catch (error) {\n//         return Promise.reject({ error });\n//     }\n// }\n\n// /** verify OTP */\n// export async function verifyOTP({ username, code }){\n//     try {\n//        const { data, status } = await axios.get('/api/verifyOTP', { params : { username, code }})\n//        return { data, status }\n//     } catch (error) {\n//         return Promise.reject(error);\n//     }\n// }\n\n// /** reset password */\n// export async function resetPassword({ username, password }){\n//     try {\n//         const { data, status } = await axios.put('/api/resetPassword', { username, password });\n//         return Promise.resolve({ data, status})\n//     } catch (error) {\n//         return Promise.reject({ error })\n//     }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/prana/Desktop/login/client/src/helper/helper.js"],"sourcesContent":["// import axios from 'axios';\r\n// import jwt_decode from 'jwt-decode';\r\n\r\n// axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\n\r\n// /** Make API Requests */\r\n\r\n\r\n// /** To get username from Token */\r\n// export async function getUsername(){\r\n//     const token = localStorage.getItem('token')\r\n//     if(!token) return Promise.reject(\"Cannot find Token\");\r\n//     let decode = jwt_decode(token)\r\n//     return decode;\r\n// }\r\n\r\n// /** authenticate function */\r\n// export async function authenticate(username){\r\n//     try {\r\n//         return await axios.post('/api/authenticate', { username })\r\n//     } catch (error) {\r\n//         return { error : \"Username doesn't exist...!\"}\r\n//     }\r\n// }\r\n\r\n// /** get User details */\r\n// export async function getUser({ username }){\r\n//     try {\r\n//         const { data } = await axios.get(`/api/user/${username}`);\r\n//         return { data };\r\n//     } catch (error) {\r\n//         return { error : \"Password doesn't Match...!\"}\r\n//     }\r\n// }\r\n\r\n// /** register user function */\r\n// export async function registerUser(credentials){\r\n//     try {\r\n//         const { data : { msg }, status } = await axios.post(`/api/register`, credentials);\r\n\r\n//         let { username, email } = credentials;\r\n\r\n//         /** send email */\r\n//         if(status === 201){\r\n//             await axios.post('/api/registerMail', { username, userEmail : email, text : msg})\r\n//         }\r\n\r\n//         return Promise.resolve(msg)\r\n//     } catch (error) {\r\n//         return Promise.reject({ error })\r\n//     }\r\n// }\r\n\r\n// /** login function */\r\n// export async function verifyPassword({ username, password }){\r\n//     try {\r\n//         if(username){\r\n//             const { data } = await axios.post('/api/login', { username, password })\r\n//             return Promise.resolve({ data });\r\n//         }\r\n//     } catch (error) {\r\n//         return Promise.reject({ error : \"Password doesn't Match...!\"})\r\n//     }\r\n// }\r\n\r\n// /** update user profile function */\r\n// export async function updateUser(response){\r\n//     try {\r\n        \r\n//         const token = await localStorage.getItem('token');\r\n//         const data = await axios.put('/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\r\n\r\n//         return Promise.resolve({ data })\r\n//     } catch (error) {\r\n//         return Promise.reject({ error : \"Couldn't Update Profile...!\"})\r\n//     }\r\n// }\r\n\r\n// /** generate OTP */\r\n// export async function generateOTP(username){\r\n//     try {\r\n//         const {data : { code }, status } = await axios.get('/api/generateOTP', { params : { username }});\r\n\r\n//         // send mail with the OTP\r\n//         if(status === 201){\r\n//             let { data : { email }} = await getUser({ username });\r\n//             let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\r\n//             await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Password Recovery OTP\"})\r\n//         }\r\n//         return Promise.resolve(code);\r\n//     } catch (error) {\r\n//         return Promise.reject({ error });\r\n//     }\r\n// }\r\n\r\n// /** verify OTP */\r\n// export async function verifyOTP({ username, code }){\r\n//     try {\r\n//        const { data, status } = await axios.get('/api/verifyOTP', { params : { username, code }})\r\n//        return { data, status }\r\n//     } catch (error) {\r\n//         return Promise.reject(error);\r\n//     }\r\n// }\r\n\r\n// /** reset password */\r\n// export async function resetPassword({ username, password }){\r\n//     try {\r\n//         const { data, status } = await axios.put('/api/resetPassword', { username, password });\r\n//         return Promise.resolve({ data, status})\r\n//     } catch (error) {\r\n//         return Promise.reject({ error })\r\n//     }\r\n// }"],"mappings":"AAAA;AACA;;AAEA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}