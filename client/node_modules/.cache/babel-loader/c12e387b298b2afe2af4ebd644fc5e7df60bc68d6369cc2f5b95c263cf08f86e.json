{"ast":null,"code":"// import React, { useEffect } from 'react'\n// import toast, { Toaster } from 'react-hot-toast';\n// import { useFormik } from 'formik';\n// import { resetPasswordValidation } from '../helper/validate'\n// import { resetPassword } from '../helper/helper'\n// import { useAuthStore } from '../store/store';\n// import { useNavigate, Navigate } from 'react-router-dom';\n// import useFetch from '../hooks/fetch.hook'\n\n// import styles from '../styles/Username.module.css';\n\n// export default function Reset() {\n\n//   const { username } = useAuthStore(state => state.auth);\n//   const navigate = useNavigate();\n//   const [{ isLoading, apiData, status, serverError }] = useFetch('createResetSession')\n\n//   const formik = useFormik({\n//     initialValues : {\n//       password : 'admin@123',\n//       confirm_pwd: 'admin@123'\n//     },\n//     validate : resetPasswordValidation,\n//     validateOnBlur: false,\n//     validateOnChange: false,\n//     onSubmit : async values => {\n\n//       let resetPromise = resetPassword({ username, password: values.password })\n\n//       toast.promise(resetPromise, {\n//         loading: 'Updating...',\n//         success: <b>Reset Successfully...!</b>,\n//         error : <b>Could not Reset!</b>\n//       });\n\n//       resetPromise.then(function(){ navigate('/password') })\n\n//     }\n//   })\n\n//   if(isLoading) return <h1 className='text-2xl font-bold'>isLoading</h1>;\n//   if(serverError) return <h1 className='text-xl text-red-500'>{serverError.message}</h1>\n//   if(status && status !== 201) return <Navigate to={'/password'} replace={true}></Navigate>\n\n//   return (\n//     <div className=\"container mx-auto\">\n\n//       <Toaster position='top-center' reverseOrder={false}></Toaster>\n\n//       <div className='flex justify-center items-center h-screen'>\n//         <div className={styles.glass} style={{ width : \"50%\"}}>\n\n//           <div className=\"title flex flex-col items-center\">\n//             <h4 className='text-5xl font-bold'>Reset</h4>\n//             <span className='py-4 text-xl w-2/3 text-center text-gray-500'>\n//               Enter new password.\n//             </span>\n//           </div>\n\n//           <form className='py-20' onSubmit={formik.handleSubmit}>\n//               <div className=\"textbox flex flex-col items-center gap-6\">\n//                   <input {...formik.getFieldProps('password')} className={styles.textbox} type=\"text\" placeholder='New Password' />\n//                   <input {...formik.getFieldProps('confirm_pwd')} className={styles.textbox} type=\"text\" placeholder='Repeat Password' />\n//                   <button className={styles.btn} type='submit'>Reset</button>\n//               </div>\n\n//           </form>\n\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/prana/Desktop/login/client/src/components/Reset.js"],"sourcesContent":["// import React, { useEffect } from 'react'\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n// import { useFormik } from 'formik';\r\n// import { resetPasswordValidation } from '../helper/validate'\r\n// import { resetPassword } from '../helper/helper'\r\n// import { useAuthStore } from '../store/store';\r\n// import { useNavigate, Navigate } from 'react-router-dom';\r\n// import useFetch from '../hooks/fetch.hook'\r\n\r\n// import styles from '../styles/Username.module.css';\r\n\r\n// export default function Reset() {\r\n\r\n//   const { username } = useAuthStore(state => state.auth);\r\n//   const navigate = useNavigate();\r\n//   const [{ isLoading, apiData, status, serverError }] = useFetch('createResetSession')\r\n\r\n//   const formik = useFormik({\r\n//     initialValues : {\r\n//       password : 'admin@123',\r\n//       confirm_pwd: 'admin@123'\r\n//     },\r\n//     validate : resetPasswordValidation,\r\n//     validateOnBlur: false,\r\n//     validateOnChange: false,\r\n//     onSubmit : async values => {\r\n      \r\n//       let resetPromise = resetPassword({ username, password: values.password })\r\n\r\n//       toast.promise(resetPromise, {\r\n//         loading: 'Updating...',\r\n//         success: <b>Reset Successfully...!</b>,\r\n//         error : <b>Could not Reset!</b>\r\n//       });\r\n\r\n//       resetPromise.then(function(){ navigate('/password') })\r\n\r\n//     }\r\n//   })\r\n\r\n\r\n//   if(isLoading) return <h1 className='text-2xl font-bold'>isLoading</h1>;\r\n//   if(serverError) return <h1 className='text-xl text-red-500'>{serverError.message}</h1>\r\n//   if(status && status !== 201) return <Navigate to={'/password'} replace={true}></Navigate>\r\n\r\n//   return (\r\n//     <div className=\"container mx-auto\">\r\n\r\n//       <Toaster position='top-center' reverseOrder={false}></Toaster>\r\n\r\n//       <div className='flex justify-center items-center h-screen'>\r\n//         <div className={styles.glass} style={{ width : \"50%\"}}>\r\n\r\n//           <div className=\"title flex flex-col items-center\">\r\n//             <h4 className='text-5xl font-bold'>Reset</h4>\r\n//             <span className='py-4 text-xl w-2/3 text-center text-gray-500'>\r\n//               Enter new password.\r\n//             </span>\r\n//           </div>\r\n\r\n//           <form className='py-20' onSubmit={formik.handleSubmit}>\r\n//               <div className=\"textbox flex flex-col items-center gap-6\">\r\n//                   <input {...formik.getFieldProps('password')} className={styles.textbox} type=\"text\" placeholder='New Password' />\r\n//                   <input {...formik.getFieldProps('confirm_pwd')} className={styles.textbox} type=\"text\" placeholder='Repeat Password' />\r\n//                   <button className={styles.btn} type='submit'>Reset</button>\r\n//               </div>\r\n\r\n//           </form>\r\n\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}